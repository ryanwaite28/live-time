// run command
gunicorn app:app --worker-class gevent --bind 127.0.0.1:5000



convoCheck = session.query(Conversations) \
    .filter( (Conversations.userA_id==you.id) | (Conversations.userB_id==you.id) ) \
    .filter( (Conversations.userA_id==user.id) | (Conversations.userB_id==user.id) ).first()




.strftime('%B %d, %Y (%A)')



--- reset password setup
1. user submits email
2. find account with that email
3. reset password: use the uniqueValue() function ---> send that value to user's email ---> update account's password to the hashed version (bcrypt)



// account: update type markup
<div class="input-field col s12">
  <select class="" data-bind="foreach: account_type_options, attr: { value: type }, event: { change: update_account_type }">
    <option data-bind="text: $data || 'Choose...', attr: { value: $data }"></option>
  </select>
  <label>Account Type | Current: (<span data-bind="text: you().type"></span><span data-bind="text: type() === you().type ? '' : ' - Unsaved'"></span>)</label>
  <p><a class="modal-trigger" href="#modal2"><i class="material-icons">info</i></a></p>
</div>



// event: hide/show performers markup
| <span class="info-text cursor-class" data-bind="click: toggle_performers_view">hide/show performers</span>



// event stream samples - client-side

<script>
  var source = new EventSource("/stream");
  source.onopen = function() {
    console.log("Connection to server opened.");
  };
  source.addEventListener('greeting', function(event) {
    var data = JSON.parse(event.data);
    alert("The server says " + data.message);
  }, false);
  source.addEventListener('error', function(event) {
    console.log(event);
    // alert("Failed to connect to event stream. Is Redis running?");
  }, false);
</script>



// event stream samples - server side (python)

def event_stream():
    pubsub = red.pubsub()
    pubsub.subscribe('chat')
    # TODO: handle client disconnection.
    for message in pubsub.listen():
        print message
        yield 'data: %s\n\n' % message['data']

@app.route('/stream')
def stream():
    return flask.Response(event_stream(),
                          mimetype="text/event-stream")
